# 文档：https://docs.github.com/zh/actions/using-workflows/about-workflows
# 工作流的名称，如果省略，则使用当前文件名
name: Auto Deploy

# 从工作流生成的工作流运行的名称，如果省略，则使用提交时的commit信息
run-name: Deploy by @${{ github.actor }}

# 触发部署的条件
on:
  # 每当 push 到 master 分支时触发部署
  push:
    branches: 
      - master

# 当前流程要执行的任务，可以是多个。[build-and-deploy]就是一个任务
jobs:
  my_first_job:
    # 任务的名称，不设置则默认my_first_job
    name: build-and-deploy

    # 运行所需要的虚拟机环境
    runs-on: ubuntu-latest

    # 每个任务下的运行步骤，短横杠 - 表示一个步骤，从上至下依次执行。
    steps:
      # clone 该仓库的源码到工作流中
      - name: Clone Code
        uses: actions/checkout@v2
        with:
          # "最近更新时间"等 git 日志相关信息，需要拉取全部提交记录
          fetch-depth: 0

      # 安装 Node 环境
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          # 选择要使用的 node 版本
          node-version: '18.x'

      - name: Cache NPM dependencies
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-npm-cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-npm-cache-

      # 安装依赖
      - name: Install dependencies
        # if: steps.npm-cache.outputs.cache-hit != 'true'
        # run: yarn --frozen-lockfile
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: npm install

      # 运行构建脚本
      - name: Run Build Script
        env:
          NODE_OPTIONS: --max_old_space_size=4096
        run: npm run build
        # run: npm ci --no-cache
        # run: node --max-old-space-size=4096 ./node_modules/.bin/vuepress build

      # 部署到 GitHub Pages
      - name: Deploy to GitHub Pages
        # uses: JamesIves/github-pages-deploy-action@releases/v3
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          # 这个 secrets.ACCESS_TOKEN 的 ACCESS_TOKEN 是根据你自己仓库里设置的字段来配置的，不要照搬
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          Branch: gh-pages
          FOLDER: src/.vuepress/dist

  my_second_job:
    # 任务的名称
    name: upload-files-to-server

    # 运行所需要的虚拟机环境
    runs-on: ubuntu-latest

    # 每个任务下的运行步骤，短横杠 - 表示一个步骤，从上至下依次执行。
    steps:
      # clone 该仓库的源码到工作流中
      - name: Clone Code
        uses: actions/checkout@v2
        with:
          # "最近更新时间"等 git 日志相关信息，需要拉取全部提交记录
          fetch-depth: 0

      # 安装 Node 环境
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          # 选择要使用的 node 版本
          node-version: '18.x'

      - name: Cache NPM dependencies
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-npm-cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-npm-cache-

      # 安装依赖
      - name: Install dependencies
        # if: steps.npm-cache.outputs.cache-hit != 'true'
        # run: yarn --frozen-lockfile
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: npm install

      # 运行构建脚本
      - name: Run Build Script
        env:
          NODE_OPTIONS: --max_old_space_size=4096
        run: npm run build

      # https://github.com/easingthemes/ssh-deploy/issues/90
      # 上传云服务器
      - name: Upload to Deploy Server
        uses: easingthemes/ssh-deploy@main
        env:
          # 服务器的私钥
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          # 服务器公网ip
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          # 服务器用户名
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          # 远程端口问题
          # REMOTE_PORT: 22 -o HostKeyAlgorithms=+ssh-rsa -o PubkeyAcceptedKeyTypes=+ssh-rsa
          # 先清空目标目录
          ARGS: '-avzr --delete'
          # 打包后输出的文件
          SOURCE: "src/.vuepress/dist"
          # 上传到服务器路径
          TARGET: /www/mysite/blog
          SCRIPT_BEFORE: |
            whoami
            ls -al
          SCRIPT_AFTER: |
            whoami
            ls -al
            echo $RSYNC_STDOUT
