const e=JSON.parse('{"key":"v-c566d382","path":"/accumulation/HTTP/httpVersion.html","title":"HTTP发展史","lang":"zh-CN","frontmatter":{"title":"HTTP发展史","date":"2023-06-19T08:33:00.000Z","category":["面试"],"tag":["计算机网络","http"],"star":true,"sticky":false,"article":true,"description":"省流总结 HTTP1.0和HTTP1.1 HTTP1.0默认是短连接。每次与服务器交互，都需要新开一个TCP连接； HTTP1.1默认是长连接。只要客户端服务端没有断开TCP连接，就一直保持连接，可以发送多次HTTP请求。(目前浏览器中对于同一个域名，默认允许同时建立 6 个 TCP 持久连接) HTTP1.1支持断点续传，只发送header信息（不带任何body信息） HTTP1.0缓存处理：expires，HTTP1.1引入更丰富的缓存字段如：cache-control HTTP1.1和HTTP2.0 HTTP1.1请求头header以纯文本传输；HTTP2.0支持头部压缩 HTTP1.1是以文本格式传输数据，HTTP2.0改用二进制格式传输数据 HTTP1.1需要等上一个请求的响应数据回来后才能发送另一个请求； HTTP2.0设计了 Stream 概念，多个 Stream 复用同一个TCP连接，并发处理多个请求 HTTP2.0支持服务端推送 HTTP/2 通过头部压缩、二进制编码、多路复用、服务器推送等新特性大幅度提升了 HTTP/1.1 的性能，而美中不足的是 HTTP/2 协议是基于 TCP 实现的，于是存在的缺陷有三个。 TCP的队头阻塞并没有彻底解决 TCP以及TCP+TLS建立连接的延时 网络迁移需要重新连接 HTTP2.0和HTTP3.0 HTTP3.0弃用TCP，基于UDP实现了QUIC协议，彻底解决了TCP层的队头堵塞 更快建立连接 通过连接ID，实现连接迁移；","head":[["meta",{"property":"og:url","content":"https://leoleor.github.io/Lion_Blog/accumulation/HTTP/httpVersion.html"}],["meta",{"property":"og:site_name","content":"一只攻城狮"}],["meta",{"property":"og:title","content":"HTTP发展史"}],["meta",{"property":"og:description","content":"省流总结 HTTP1.0和HTTP1.1 HTTP1.0默认是短连接。每次与服务器交互，都需要新开一个TCP连接； HTTP1.1默认是长连接。只要客户端服务端没有断开TCP连接，就一直保持连接，可以发送多次HTTP请求。(目前浏览器中对于同一个域名，默认允许同时建立 6 个 TCP 持久连接) HTTP1.1支持断点续传，只发送header信息（不带任何body信息） HTTP1.0缓存处理：expires，HTTP1.1引入更丰富的缓存字段如：cache-control HTTP1.1和HTTP2.0 HTTP1.1请求头header以纯文本传输；HTTP2.0支持头部压缩 HTTP1.1是以文本格式传输数据，HTTP2.0改用二进制格式传输数据 HTTP1.1需要等上一个请求的响应数据回来后才能发送另一个请求； HTTP2.0设计了 Stream 概念，多个 Stream 复用同一个TCP连接，并发处理多个请求 HTTP2.0支持服务端推送 HTTP/2 通过头部压缩、二进制编码、多路复用、服务器推送等新特性大幅度提升了 HTTP/1.1 的性能，而美中不足的是 HTTP/2 协议是基于 TCP 实现的，于是存在的缺陷有三个。 TCP的队头阻塞并没有彻底解决 TCP以及TCP+TLS建立连接的延时 网络迁移需要重新连接 HTTP2.0和HTTP3.0 HTTP3.0弃用TCP，基于UDP实现了QUIC协议，彻底解决了TCP层的队头堵塞 更快建立连接 通过连接ID，实现连接迁移；"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-22T09:43:27.000Z"}],["meta",{"property":"article:author","content":"狮子"}],["meta",{"property":"article:tag","content":"计算机网络"}],["meta",{"property":"article:tag","content":"http"}],["meta",{"property":"article:published_time","content":"2023-06-19T08:33:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-22T09:43:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"HTTP发展史\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-19T08:33:00.000Z\\",\\"dateModified\\":\\"2025-02-22T09:43:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"狮子\\"}]}"]]},"headers":[{"level":2,"title":"HTTP/0.9","slug":"http-0-9","link":"#http-0-9","children":[]},{"level":2,"title":"HTTP/1.0","slug":"http-1-0","link":"#http-1-0","children":[]},{"level":2,"title":"HTTP/1.1","slug":"http-1-1","link":"#http-1-1","children":[{"level":3,"title":"HTTP1.1在HTTP1.0上的改进","slug":"http1-1在http1-0上的改进","link":"#http1-1在http1-0上的改进","children":[{"level":4,"title":"😊改进持久连接","slug":"改进持久连接","link":"#改进持久连接","children":[]},{"level":4,"title":"😊不成熟的 HTTP 管线化","slug":"不成熟的-http-管线化","link":"#不成熟的-http-管线化","children":[]},{"level":4,"title":"😊提供虚拟主机的支持","slug":"提供虚拟主机的支持","link":"#提供虚拟主机的支持","children":[]},{"level":4,"title":"😊对动态生成的内容提供了完美支持","slug":"对动态生成的内容提供了完美支持","link":"#对动态生成的内容提供了完美支持","children":[]},{"level":4,"title":"😊 客户端 Cookie、安全机制","slug":"客户端-cookie、安全机制","link":"#客户端-cookie、安全机制","children":[]},{"level":4,"title":"😊断点续传","slug":"断点续传","link":"#断点续传","children":[]}]},{"level":3,"title":"​HTTP1.1 性能瓶颈","slug":"​http1-1-性能瓶颈","link":"#​http1-1-性能瓶颈","children":[{"level":4,"title":"😕请求 / 响应头部（Header）未经压缩，首部信息越多延迟越大(只能压缩 Body 的部分)；","slug":"请求-响应头部-header-未经压缩-首部信息越多延迟越大-只能压缩-body-的部分","link":"#请求-响应头部-header-未经压缩-首部信息越多延迟越大-只能压缩-body-的部分","children":[]},{"level":4,"title":"😕响应头的对头阻塞没有彻底解决；","slug":"响应头的对头阻塞没有彻底解决","link":"#响应头的对头阻塞没有彻底解决","children":[]},{"level":4,"title":"😕没有请求优先级控制；","slug":"没有请求优先级控制","link":"#没有请求优先级控制","children":[]},{"level":4,"title":"😕请求只能从客户端开始，服务器只能被动响应。","slug":"请求只能从客户端开始-服务器只能被动响应。","link":"#请求只能从客户端开始-服务器只能被动响应。","children":[]}]}]},{"level":2,"title":"HTTP/2.0","slug":"http-2-0","link":"#http-2-0","children":[{"level":3,"title":"HTTP2.0在HTTP1.1上的改进","slug":"http2-0在http1-1上的改进","link":"#http2-0在http1-1上的改进","children":[{"level":4,"title":"😊头部压缩","slug":"头部压缩","link":"#头部压缩","children":[]},{"level":4,"title":"😊二进制帧","slug":"二进制帧","link":"#二进制帧","children":[]},{"level":4,"title":"😊多路复用，并发传输","slug":"多路复用-并发传输","link":"#多路复用-并发传输","children":[]},{"level":4,"title":"😊服务器推送","slug":"服务器推送","link":"#服务器推送","children":[]}]},{"level":3,"title":"美中不足的HTTP2.0","slug":"美中不足的http2-0","link":"#美中不足的http2-0","children":[{"level":4,"title":"😕TCP 的队头阻塞并没有彻底解决","slug":"tcp-的队头阻塞并没有彻底解决","link":"#tcp-的队头阻塞并没有彻底解决","children":[]},{"level":4,"title":"😕TCP 以及 TCP+TLS 建立连接的延时","slug":"tcp-以及-tcp-tls-建立连接的延时","link":"#tcp-以及-tcp-tls-建立连接的延时","children":[]},{"level":4,"title":"😕网络迁移需要重新连接","slug":"网络迁移需要重新连接","link":"#网络迁移需要重新连接","children":[]}]}]},{"level":2,"title":"HTTP/3.0","slug":"http-3-0","link":"#http-3-0","children":[{"level":3,"title":"彻底解决队头阻塞","slug":"彻底解决队头阻塞","link":"#彻底解决队头阻塞","children":[]},{"level":3,"title":"更快的连接建立","slug":"更快的连接建立","link":"#更快的连接建立","children":[]},{"level":3,"title":"连接迁移","slug":"连接迁移","link":"#连接迁移","children":[]}]}],"git":{"createdTime":1740217407000,"updatedTime":1740217407000,"contributors":[{"name":"狮子","email":"hzr1642921219@163.com","commits":1}]},"readingTime":{"minutes":16.39,"words":4916},"filePathRelative":"accumulation/HTTP/httpVersion.md","localizedDate":"2023年6月19日","excerpt":"<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">省流总结</p>\\n<h3> HTTP1.0和HTTP1.1</h3>\\n<ol>\\n<li>HTTP1.0默认是<code>短连接</code>。每次与服务器交互，都需要新开一个TCP连接；<br>\\nHTTP1.1默认是<code>长连接</code>。只要客户端服务端没有断开TCP连接，就一直保持连接，可以发送多次HTTP请求。(目前浏览器中对于同一个域名，默认允许同时建立 6 个 TCP 持久连接)</li>\\n<li>HTTP1.1支持<code>断点续传</code>，只发送header信息（不带任何body信息）</li>\\n<li>HTTP1.0缓存处理：expires，HTTP1.1引入更丰富的缓存字段如：cache-control</li>\\n</ol>\\n<h3> HTTP1.1和HTTP2.0</h3>\\n<ol>\\n<li>HTTP1.1请求头header以纯文本传输；HTTP2.0支持<code>头部压缩</code></li>\\n<li>HTTP1.1是以<code>文本格式</code>传输数据，HTTP2.0改用<code>二进制格式</code>传输数据</li>\\n<li>HTTP1.1需要等上一个请求的响应数据回来后才能发送另一个请求；<br>\\nHTTP2.0设计了 <code>Stream</code> 概念，多个 Stream 复用同一个TCP连接，并发处理多个请求</li>\\n<li>HTTP2.0支持<code>服务端推送</code></li>\\n</ol>\\n<p>HTTP/2 通过头部压缩、二进制编码、多路复用、服务器推送等新特性大幅度提升了 HTTP/1.1 的性能，而美中不足的是 HTTP/2 协议是基于 TCP 实现的，于是存在的缺陷有三个。</p>\\n<ol>\\n<li>TCP的队头阻塞并没有彻底解决</li>\\n<li>TCP以及TCP+TLS建立连接的延时</li>\\n<li>网络迁移需要重新连接</li>\\n</ol>\\n<h3> HTTP2.0和HTTP3.0</h3>\\n<ol>\\n<li>HTTP3.0弃用TCP，基于UDP实现了<code>QUIC协议</code>，彻底解决了TCP层的队头堵塞</li>\\n<li>更快建立连接</li>\\n<li>通过连接ID，实现连接迁移；</li>\\n</ol>\\n</div>","autoDesc":true}');export{e as data};
