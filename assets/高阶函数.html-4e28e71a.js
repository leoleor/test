const n=JSON.parse('{"key":"v-109085be","path":"/accumulation/JavaScript/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0.html","title":"高阶函数","lang":"zh-CN","frontmatter":{"title":"高阶函数","category":["面试"],"tag":["JavaScript"],"star":false,"sticky":false,"article":true,"description":"概念 如果一个函数符合下面2个规范中的任何一个，那该函数就是高阶函数。 若A函数，接收的参数是一个函数，那么A就可以称之为高阶函数。 若A函数，调用的返回值依然是一个函数，那么A就可以称之为高阶函数。 常见的高阶函数有：Promise、setTimeout、arr.map()等等 函数柯里化 通过函数调用继续返回函数的方式，实现多次接收参数最后统一处理的函数编码形式。 function sum(a) { return (b) =&gt; { return (c) =&gt; { return a+b+c } } } const result = sum(1)(2)(3)","head":[["meta",{"property":"og:url","content":"https://leoleor.github.io/test/accumulation/JavaScript/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0.html"}],["meta",{"property":"og:site_name","content":"一只攻城狮"}],["meta",{"property":"og:title","content":"高阶函数"}],["meta",{"property":"og:description","content":"概念 如果一个函数符合下面2个规范中的任何一个，那该函数就是高阶函数。 若A函数，接收的参数是一个函数，那么A就可以称之为高阶函数。 若A函数，调用的返回值依然是一个函数，那么A就可以称之为高阶函数。 常见的高阶函数有：Promise、setTimeout、arr.map()等等 函数柯里化 通过函数调用继续返回函数的方式，实现多次接收参数最后统一处理的函数编码形式。 function sum(a) { return (b) =&gt; { return (c) =&gt; { return a+b+c } } } const result = sum(1)(2)(3)"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-22T09:43:27.000Z"}],["meta",{"property":"article:author","content":"狮子"}],["meta",{"property":"article:tag","content":"JavaScript"}],["meta",{"property":"article:modified_time","content":"2025-02-22T09:43:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"高阶函数\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-22T09:43:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"狮子\\"}]}"]]},"headers":[{"level":2,"title":"概念","slug":"概念","link":"#概念","children":[]},{"level":2,"title":"函数柯里化","slug":"函数柯里化","link":"#函数柯里化","children":[]}],"git":{"createdTime":1740217407000,"updatedTime":1740217407000,"contributors":[{"name":"狮子","email":"hzr1642921219@163.com","commits":1}]},"readingTime":{"minutes":0.6,"words":179},"filePathRelative":"accumulation/JavaScript/高阶函数.md","localizedDate":"2025年2月22日","excerpt":"<h2> 概念</h2>\\n<p>如果一个函数符合下面2个规范中的任何一个，那该函数就是高阶函数。</p>\\n<ol>\\n<li>若A函数，接收的参数是一个函数，那么A就可以称之为高阶函数。</li>\\n<li>若A函数，调用的返回值依然是一个函数，那么A就可以称之为高阶函数。</li>\\n</ol>\\n<p>常见的高阶函数有：Promise、setTimeout、arr.map()等等</p>\\n<h2> 函数柯里化</h2>\\n<p>通过函数调用继续返回函数的方式，实现多次接收参数最后统一处理的函数编码形式。</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">sum</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">a</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span> \\n    <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">b</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span> \\n        <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">c</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span> \\n            <span class=\\"token keyword\\">return</span> a<span class=\\"token operator\\">+</span>b<span class=\\"token operator\\">+</span>c\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">const</span> result <span class=\\"token operator\\">=</span> <span class=\\"token function\\">sum</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
