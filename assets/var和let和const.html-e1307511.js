import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as t,f as e}from"./app-aa5ccc09.js";const o={},c=e("<ul><li><p>定义</p><ul><li>var定义的变量；</li><li>let定义的变量；</li><li>const定义的常量</li></ul></li><li><p>作用域</p><ul><li>var作用域是整个封闭函数，是全域的；</li><li>let作用域是在块级或者字块中；</li><li>const跟let一样作用于块级作用域</li></ul></li><li><p>变量提升</p><ul><li>不论通过var声明的变量处于当前作用于的第几行，都会提升到作用域的最顶部；var完成了声明和初始化，初始化的值为undefined；function完成声明、初始化和赋值；</li><li>只要块级作用域内存在let，它所声明的变量就会绑定在这个区域，但是let声明的变量不会在顶部初始化，解析let那一行才初始化或者初始化和赋值，凡是在let声明之前使用该变量都会报错not defined，称为<code>暂时性死区</code>；</li><li>const没有变量提升，声明时必须初始化（赋值），重复声明会报错，声明的常量不可改变</li></ul></li><li><p>重复声明</p><ul><li>同一作用域内，var可以</li><li>同一作用域内，let不可以</li><li>同一作用域内，const不可以</li></ul></li><li><p>内存分配</p><ul><li>var会先直接在栈内存分配内存空间，等执行实际语句的时候，再存储对应变量，如果是引用类型，那么会在堆内存开辟一个空间，栈内存指针指向堆内存；</li><li>let不会预分配，而且会检查，相同变量名则报错；</li><li>const也不会预分配，const不可修改，但可以修改对象里的属性</li></ul></li></ul>",1),n=[c];function r(s,a){return i(),t("div",null,n)}const p=l(o,[["render",r],["__file","var和let和const.html.vue"]]);export{p as default};
