import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,f as e}from"./app-87f21d68.js";const t={},l=e(`<h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h2><p>BFC（Block Formatting Context）即“块级格式化上下文”表现为：</p><ol><li>内部的元素在垂直方向上一个接一个排列</li><li>上下相邻的两个元素的margin会重叠</li><li>一个独立的渲染区域，里面的元素不会影响外面的元素</li><li>不会与浮动元素发生重叠</li><li>计算bfc高度的时候，需要计算浮动元素的高度</li></ol><h2 id="如何创建" tabindex="-1"><a class="header-anchor" href="#如何创建" aria-hidden="true">#</a> 如何创建</h2><ol><li>浮动元素，float 除 none 以外的值；</li><li>绝对定位元素，position（absolute，fixed）</li><li>overflow的值不为visible（hidden，scroll，auto，inherit）</li><li>display的值为table-cell, table-caption, inline-block中的任何一个</li></ol><h2 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景" aria-hidden="true">#</a> 使用场景</h2><ol><li>去除边距重叠现象</li><li>实现三栏自适应布局</li><li>避免浮动元素覆盖</li><li>清除外部浮动(高度塌陷)</li></ol><blockquote><p>Q：清除浮动方法？</p></blockquote><ol><li>在浮动元素末尾添加一个空的标签例如</li></ol><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">clear</span><span class="token punctuation">:</span>both</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>优点：通俗易懂，容易掌握<br> 缺点：会添加多少无意义的空标签</p><ol start="2"><li>父元素设置 overflow: hidden，创建bfc，根据计算bfc高度，浮动元素也要计算</li></ol><p>优点：不存在结构和语义化问题，代码量极少<br> ​缺点：内容增多时候容易造成不会自动换行导致内容被隐藏掉，无法显示需要溢出的元素</p><ol start="3"><li>最佳伪元素（::after）</li></ol><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.box::after</span> <span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>
  <span class="token property">display</span> <span class="token punctuation">:</span>block<span class="token punctuation">;</span>
  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
  <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
​<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),i=[l];function o(p,c){return a(),s("div",null,i)}const d=n(t,[["render",o],["__file","对BFC的理解.html.vue"]]);export{d as default};
