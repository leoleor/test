import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,f as p}from"./app-aa5ccc09.js";const t={},e=p(`<h2 id="不改变数组" tabindex="-1"><a class="header-anchor" href="#不改变数组" aria-hidden="true">#</a> 不改变数组</h2><h3 id="array-every" tabindex="-1"><a class="header-anchor" href="#array-every" aria-hidden="true">#</a> Array every()</h3><p><code>every()</code> 方法检查数组中的所有元素是否都通过了测试（被作为函数提供）。</p><p><code>every()</code> 方法对数组中存在的每个元素执行一次函数：</p><pre><code>- 如果找到函数返回 false 值的数组元素，every() 返回 false（并且不检查剩余值）
- 如果没有出现 false，every() 返回 true
</code></pre><p>注释：every() 不对没有值的数组元素执行函数。</p><h3 id="array-some" tabindex="-1"><a class="header-anchor" href="#array-some" aria-hidden="true">#</a> Array some()</h3><p><code>some()</code> 方法检查数组中的任何元素是否通过测试（作为函数提供）。</p><p><code>some()</code> 方法对数组中存在的每个元素执行一次函数：</p><pre><code>- 如果找到函数返回真值的数组元素，some() 返回真（并且不检查剩余值）
- 否则返回 false
</code></pre><p>注释：some() 对没有值的数组元素不执行函数。</p><h3 id="array-​filter" tabindex="-1"><a class="header-anchor" href="#array-​filter" aria-hidden="true">#</a> Array ​filter()</h3><p>​filter()---检测数组元素，并返回符合条件所有元素的数组。</p><h3 id="array-find" tabindex="-1"><a class="header-anchor" href="#array-find" aria-hidden="true">#</a> Array find()</h3><p><code>find()</code> 方法返回数组中第一个通过测试的元素的值（作为函数提供）。</p><p><code>find()</code> 方法对数组中存在的每个元素执行一次函数：</p><pre><code>- 如果找到函数返回 true 值的数组元素，则 find() 返回该数组元素的值（区别filter找到后会停止遍历）
- 否则返回 undefined
</code></pre><p>注释：find() 不对空数组执行该函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token operator">=</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">rebateRatio</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">rebateRatio</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
  <span class="token keyword">const</span> <span class="token operator">=</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">rebateRatio</span><span class="token operator">:</span> <span class="token string">&#39;0.3&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
<span class="token keyword">const</span> mergedArray <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> foundItem <span class="token operator">=</span> arr2<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">i</span> <span class="token operator">=&gt;</span> i<span class="token punctuation">.</span>id <span class="token operator">===</span> item<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>foundItem<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>item<span class="token punctuation">,</span> <span class="token literal-property property">rebateRatio</span><span class="token operator">:</span> foundItem<span class="token punctuation">.</span>rebateRatio<span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> item<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="array-​indexof" tabindex="-1"><a class="header-anchor" href="#array-​indexof" aria-hidden="true">#</a> Array ​indexOf()</h3><p>​indexOf()---搜索数组中的元素，并返回它所在的位置。</p><h3 id="array-​lastindexof" tabindex="-1"><a class="header-anchor" href="#array-​lastindexof" aria-hidden="true">#</a> Array ​lastIndexOf()</h3><p>​lastIndexOf()---返回一个指定的字符串值最后出现的位置，在一个字符串中的指定位置从后向前搜索。</p><h3 id="array-​concat" tabindex="-1"><a class="header-anchor" href="#array-​concat" aria-hidden="true">#</a> Array ​concat()</h3><p>​concat()---连接两个或更多的数组，并返回结果。【es6用扩展运算符…】</p><p>arr.concat(array2, array3, ..., arrayX)</p><p><code>arr.concat([])</code> 同 <code>arr.slice()</code> 本质是 <code>浅拷贝</code></p><h3 id="array-​slice" tabindex="-1"><a class="header-anchor" href="#array-​slice" aria-hidden="true">#</a> Array ​slice()</h3><p><code>slice()</code> 方法以新的数组对象，返回数组中被选中的元素。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [1,2,3,4,5,6,7,8,9]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [1,2,3,4,5,6,7,8,9]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [1,2,3]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [3,4,5,6,7,8,9]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [9]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [7,8]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// []</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>arr.slice()</code> 第一层是深拷贝，多层之后就不行了，本质还是 <code>浅拷贝</code></p><h3 id="array-​map" tabindex="-1"><a class="header-anchor" href="#array-​map" aria-hidden="true">#</a> Array ​map()</h3><p>​map()---通过指定函数处理数组的每个元素，并返回处理后的数组。</p><h3 id="array-​join" tabindex="-1"><a class="header-anchor" href="#array-​join" aria-hidden="true">#</a> Array ​join()</h3><p>​join()---把数组的所有元素放入一个字符串。</p><h3 id="array-​tostring" tabindex="-1"><a class="header-anchor" href="#array-​tostring" aria-hidden="true">#</a> Array ​toString()</h3><p>​toString()---把数组转换为字符串，并返回结果。</p><h3 id="array-reduce" tabindex="-1"><a class="header-anchor" href="#array-reduce" aria-hidden="true">#</a> Array reduce()</h3><p><code>reduce()</code> 方法将数组缩减为单个值。</p><p><code>reduce()</code> 方法为数组的每个值（从左到右）执行提供的函数。</p><p>函数的返回值存储在累加器中（结果/总计）。</p><p>注释：对没有值的数组元素，不执行 reduce() 方法。</p><p>reduce(function(total,currentValue,index,arr), initialValue)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>

<span class="token keyword">function</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token parameter">total<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> total <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

numbers<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>getSum<span class="token punctuation">)</span> <span class="token comment">// 22</span>
numbers<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>getSum<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// 27</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="改变原数组" tabindex="-1"><a class="header-anchor" href="#改变原数组" aria-hidden="true">#</a> 改变原数组</h2><h3 id="array-pop" tabindex="-1"><a class="header-anchor" href="#array-pop" aria-hidden="true">#</a> Array pop()</h3><p>pop()---删除并返回数组的最后一个元素。</p><h3 id="array-​push" tabindex="-1"><a class="header-anchor" href="#array-​push" aria-hidden="true">#</a> Array ​push()</h3><p>push()---向数组的末尾添加一个或更多元素，并返回新的长度。</p><h3 id="array-shift" tabindex="-1"><a class="header-anchor" href="#array-shift" aria-hidden="true">#</a> Array shift()</h3><p>shift()---删除并返回数组的第一个元素。</p><h3 id="array-unshift" tabindex="-1"><a class="header-anchor" href="#array-unshift" aria-hidden="true">#</a> Array unshift()</h3><p>unshift()---向数组的开头添加一个或更多元素，并返回新的长度。</p><h3 id="array-reverse" tabindex="-1"><a class="header-anchor" href="#array-reverse" aria-hidden="true">#</a> Array reverse()</h3><p>reverse()---反转数组的元素顺序。</p><h3 id="array-sort" tabindex="-1"><a class="header-anchor" href="#array-sort" aria-hidden="true">#</a> Array sort()</h3><p>sort()---对数组的元素进行排序。</p><h3 id="array-splice" tabindex="-1"><a class="header-anchor" href="#array-splice" aria-hidden="true">#</a> Array splice()</h3><p>splice()---用于插入、删除或替换数组的元素。</p><p>array.splice(index, howmany, item1, …, itemX)<br> index: 必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。<br> howmany：必需。要删除的项目数量。如果设置为 0，则不会删除项目。<br> item1, …, itemX: 可选。向数组添加的新项目。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Orange&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Mango&quot;</span><span class="token punctuation">]</span>
<span class="token comment">// 在位置 2，添加 2 个元素：</span>
fruits<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;Lemon&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Kiwi&quot;</span><span class="token punctuation">)</span> <span class="token comment">// Banana,Orange,Lemon,Kiwi,Apple,Mango</span>

<span class="token keyword">var</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Orange&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Mango&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 在位置 2，添加 2 个元素，删除 1 个元素：</span>
fruits<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;Lemon&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Kiwi&quot;</span><span class="token punctuation">)</span> <span class="token comment">// Banana,Orange,Lemon,Kiwi,Mango</span>

<span class="token keyword">const</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Orange&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Mango&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Kiwi&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 在位置 2，删除 2 个项目：</span>
fruits<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// Banana,Orange,Kiwi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,61),o=[e];function c(r,i){return a(),s("div",null,o)}const d=n(t,[["render",c],["__file","数组.html.vue"]]);export{d as default};
