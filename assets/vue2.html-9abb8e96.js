import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as l,c,b as s,d as a,e,f as t}from"./app-aa5ccc09.js";const i={},r={href:"https://juejin.cn/post/6919373017218809864",target:"_blank",rel:"noopener noreferrer"},u={href:"https://juejin.cn/post/6964779204462247950",target:"_blank",rel:"noopener noreferrer"},d=t(`<h2 id="mvvm" tabindex="-1"><a class="header-anchor" href="#mvvm" aria-hidden="true">#</a> MVVM</h2><ul><li><p>概念</p><ul><li>Model(数据)</li><li>View(视图)</li><li>ViewModel(负责两者之间的数据处理操作)</li></ul></li><li><p>特点</p><ul><li>低耦合: 视图view可独立于model的变化和修改</li><li>可复用性: 视图逻辑viewModel可用于不同的view</li><li>独立开发</li><li>可测试性</li></ul></li><li><p>总结</p></li></ul><p>mvvm是前后端分离的一种技术，m是model数据层，v是view视图层，vm是处理数据与视图逻辑的桥梁viewmodel层。</p><p>mvvm最核心的部分就是viewmodel层，它向上与视图层进行数据双向绑定，向下与model层通过接口请求进行数据交互。</p><p>vue里就是将以前繁琐的dom操作，通过js去编写成一个通用的viewmodel，使得我们前端开发更专注于界面，以及界面上的交互。</p><p>它具有低耦合、可复用性、独立开发、可测试性的特点</p><h2 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期" aria-hidden="true">#</a> 生命周期</h2><h3 id="组件生命周期" tabindex="-1"><a class="header-anchor" href="#组件生命周期" aria-hidden="true">#</a> 组件生命周期</h3><ul><li>create：beforeCreate、created（不可操作dom，掉接口）</li><li>mount：beforeMount、mounted（可操作dom，$refs）</li><li>update：beforeUpdate、updated</li><li>destroy：beforeDestroy、destroyed（销毁定时任务）</li></ul><blockquote><p>加载一个子组件的过程:</p></blockquote><blockquote><p>父beforeCreate-&gt;父created-&gt;父beforeMount-&gt;子beforeCreate-&gt;子created-&gt;子beforeMount<br> 子mounted-&gt;父mounted<br> 父beforeUpdate-&gt;子beforeUpdate-&gt;子updated-&gt;父updated<br> 父beforeDestroy-&gt;子beforeDestroy-&gt;子destroyed-&gt;父destroyed</p></blockquote><h3 id="keepalive生命周期" tabindex="-1"><a class="header-anchor" href="#keepalive生命周期" aria-hidden="true">#</a> KeepAlive生命周期</h3><p>keep-alive有单独的生命周期activated、deactivated。当组件被换掉时，会被缓存到内存中，触发 deactivated 生命周期；当组件被切回来时，再去缓存里找这个组件、触发 activated钩子函数。</p><p>当引入keep-alive的时候，页面第一次进入，钩子的触发顺序created-&gt; mounted-&gt; activated，退出时触发deactivated。 当再次进入（前进或者后退）时，只触发activated。</p><h2 id="双向绑定" tabindex="-1"><a class="header-anchor" href="#双向绑定" aria-hidden="true">#</a> 双向绑定</h2><p>vue2.0 是采用 <code>数据劫持</code> 结合 <code>发布者-订阅者模式</code> 的方式，通过 <code>Object.defineProperty()</code> 来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调来渲染视图。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>​Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&quot;obj的属性&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> 
  <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>实现思路:</p></blockquote><ol><li>实现一个监听器Observer，劫持数据</li><li>还需要一个订阅器Dep，在监听器捕获数据的时候添加订阅者，更新数据的时候发布通知</li><li>实现一个订阅者Watcher，可以收到属性的变化通知并执行相应的函数，从而更新视图 监听器和订阅者不是直接通讯的，而是通过订阅器（发布订阅模式）</li></ol><h2 id="v-model" tabindex="-1"><a class="header-anchor" href="#v-model" aria-hidden="true">#</a> v-model</h2>`,20),k={href:"https://juejin.cn/post/7049135444310622245",target:"_blank",rel:"noopener noreferrer"},v=t(`<ul><li><p>一种语法糖</p><ul><li>input的text类型使用 value 属性和 input 事件</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>searchText<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>input</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>searchText = $event.target.value<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>checkbox 和 radio 使用 checked 属性和 change 事件</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>radio<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:checked</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>foo = &#39;1&#39;<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>foo = $event.target.value<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>select 使用 value 属性 和change 事件</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>foo<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>foo = $event.target.value<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>双向绑定，单向数据流</p></li></ul><p>单向数据流: 子组件不能改变父组件传递给它的 prop 属性，推荐的做法是它抛出事件，通知父组件自行改变绑定的值。</p><ul><li>总结</li></ul><p>v-model，第一它本质是一种语法糖，用来监听用户输入事件以更新数据，比如作用在input框的v-bind绑定value和v-on监听input、作用select标签的value属性和change事件、作用在radio标签的checked属性和change事件；第二它具有双向数据绑定以及单向数据流特性，双向数据绑定就是刚刚第一点提到的，可以在input、select元素上创建双向数据绑定，单向数据流就是子组件不能修改父组件传递给它的 prop 属性（可以通过emit出去一个事件在父元素接收）</p><h2 id="虚拟dom" tabindex="-1"><a class="header-anchor" href="#虚拟dom" aria-hidden="true">#</a> 虚拟DOM</h2><ul><li>面试话术</li></ul><p>虚拟DOM是真实DOM的抽象，通过js来表示DOM结构，它可以将多次DOM修改的结果一次性的更新在页面上，从而有效的减少页面的渲染次数，减少浏览器的重排重绘次数，提高渲染性能。</p><ul><li><p>为什么要用虚拟DOM</p><ol><li>保证性能下限（首次渲染大量DOM时，由于多了一层虚拟DOM的计算，会比innerHTML插入慢）</li><li>无需手动操作DOM，提升开发效率</li><li>跨平台：服务端渲染、uniapp</li></ol></li><li><p>diff算法</p></li></ul><p>策略: 深度遍历，同层比较</p><ul><li><p>vue中的key</p><ul><li>v-for更高效的更新渲染虚拟DOM</li><li>v-if标识唯一元素，避免就地复用</li></ul></li></ul><h2 id="组件通信" tabindex="-1"><a class="header-anchor" href="#组件通信" aria-hidden="true">#</a> 组件通信</h2>`,11),m=s("ul",null,[s("li",null,[s("p",null,[s("code",null,"props"),a(" (父->子) / $emit (子->父)")])]),s("li",null,[s("p",null,[s("code",null,"$ref"),a(" (父->子只能一级，不能跨级)")])]),s("li",null,[s("p",null,[s("code",null,"$children"),a(" (父->子) / $parent (子->父)")])]),s("li",null,[s("p",null,[s("code",null,"eventBus"),a(" ("),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"e"),s("mi",null,"m"),s("mi",null,"i"),s("mi",null,"t"),s("mi",{mathvariant:"normal"},"/")]),s("annotation",{encoding:"application/x-tex"},"emit/")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"e"),s("span",{class:"mord mathnormal"},"mi"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mord"},"/")])])]),a("on)")])]),s("li",null,[s("p",null,[s("code",null,"vuex")])]),s("li",null,[s("p",null,[s("code",null,"$attrs / $listeners"),a(" (父->子孙)")]),s("ul",null,[s("li",null,[s("code",null,"$attrs"),a(": 除了组件内props声名了的所有给组件传的值（class,style除外）")])]),s("p",null,"在子组件上用v-bind=“attrs”，用的时候直接this.$attrs(上一层定义在props就不会传到下层了)"),s("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[s("pre",{class:"language-javascript"},[s("code",null,[s("span",{class:"token comment"},"// A组件"),a(`
`),s("span",{class:"token operator"},"<"),s("span",{class:"token constant"},"B"),a(),s("span",{class:"token operator"},":"),a("pchild1"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},'"child1"'),a(),s("span",{class:"token operator"},":"),a("pchild2"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},'"child2"'),a(),s("span",{class:"token operator"},":"),a("pchild3"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},'"child3"'),a(),s("span",{class:"token operator"},"/"),s("span",{class:"token operator"},">"),a(`
`),s("span",{class:"token function"},"data"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token punctuation"},"{"),a(`
  `),s("span",{class:"token keyword"},"return"),a(),s("span",{class:"token punctuation"},"{"),a(`
    `),s("span",{class:"token literal-property property"},"child1"),s("span",{class:"token operator"},":"),s("span",{class:"token string"},"'1'"),s("span",{class:"token punctuation"},","),a(`
    `),s("span",{class:"token literal-property property"},"child2"),s("span",{class:"token operator"},":"),a(),s("span",{class:"token number"},"2"),s("span",{class:"token punctuation"},","),a(`
    `),s("span",{class:"token literal-property property"},"child3"),s("span",{class:"token operator"},":"),s("span",{class:"token punctuation"},"{"),a(`
      `),s("span",{class:"token literal-property property"},"name"),s("span",{class:"token operator"},":"),s("span",{class:"token string"},"'child3'"),a(`
    `),s("span",{class:"token punctuation"},"}"),a(`
  `),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},";"),a(`
`),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},","),a(`

`),s("span",{class:"token comment"},"// B组件"),a(`
`),s("span",{class:"token operator"},"<"),s("span",{class:"token constant"},"C"),a(" v"),s("span",{class:"token operator"},"-"),a("bind"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},'"$attrs"'),a(),s("span",{class:"token operator"},"/"),s("span",{class:"token operator"},">"),a(`
`),s("span",{class:"token literal-property property"},"props"),s("span",{class:"token operator"},":"),a(),s("span",{class:"token punctuation"},"{"),a(`
  `),s("span",{class:"token literal-property property"},"pchild1"),s("span",{class:"token operator"},":"),s("span",{class:"token punctuation"},"{"),a(`
    `),s("span",{class:"token literal-property property"},"type"),s("span",{class:"token operator"},":"),a(`String
  `),s("span",{class:"token punctuation"},"}"),a(`
`),s("span",{class:"token punctuation"},"}"),a(`
console`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"log"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"this"),s("span",{class:"token punctuation"},"."),a("pchild1"),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token comment"},"// 1"),a(`
console`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"log"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"this"),s("span",{class:"token punctuation"},"."),a("$attrs"),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token comment"},"// { pchild2, pchild3 }"),a(`

`),s("span",{class:"token comment"},"// C组件"),a(`
console`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"log"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"this"),s("span",{class:"token punctuation"},"."),a("pchild1"),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token comment"},"// undefined"),a(`
console`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"log"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"this"),s("span",{class:"token punctuation"},"."),a("$attrs"),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token comment"},"// { pchild2, pchild3 }"),a(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])]),s("ul",null,[s("li",null,[s("code",null,"$listeners"),a(": 接收除了带有.native事件修饰符的所有事件监听器")])]),s("p",null,"当出现同名的事件时，不会被覆盖，而是都会执行，执行顺序就是事件冒泡的执行顺序，先触发child 再触发parent")]),s("li",null,[s("p",null,[s("code",null,"Provide / inject"),a(" (父->子孙) (适用于高阶组件)")])])],-1),g=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">provide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&quot;父组件提供给子孙组件的值&quot;</span>    
  <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
子组件接收：
<span class="token literal-property property">inject</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;msg&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="watch和computed" tabindex="-1"><a class="header-anchor" href="#watch和computed" aria-hidden="true">#</a> watch和computed</h2><ol><li>watch监听属性，computed计算属性</li><li>watch可以监听的数据源：data、props、computed；computed不在data里，而是根据data、props里的数据计算出一个新的值</li><li>watch不支持缓存，监听的数据变化就触发相应操作；computed缓存计算结果，只有依赖的数据变化才会重新计算</li><li>watch支持异步；computed不支持异步</li><li>例子: watch: 待补充；computed: 拼接，原价打折计算结果</li></ol><p>watch用法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 设置immediate: true，当值第一次绑定的时候，立即执行监听函数/执行handler方法</span>
<span class="token comment">// 设置deep: true，当对象的属性较多是，每个属性的变化都会执行handler</span>
<span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span> 
  <span class="token function">pageSize</span><span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span> oldVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 简单监听</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newVal<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span> 
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">person</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 对对象进行深度监听</span>
    <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">nv</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nv<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">immediate</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">deep</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;person.name&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 对对象的某一个属性进行深度监听</span>
    <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">nv</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nv<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">immediate</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">deep</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>computed用法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>surname <span class="token operator">+</span> <span class="token string">&#39;~&#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="v-show和v-if" tabindex="-1"><a class="header-anchor" href="#v-show和v-if" aria-hidden="true">#</a> v-show和v-if</h2><ul><li><p>相同: 控制元素在页面的显隐，用法也相同</p></li><li><p>不同</p><ul><li>控制手段：v-show通过为元素添加css样式的display:none；v-if通过添加或删除dom元素</li><li>触发周期：v-show不触发生命周期；v-if会触发生命周期: false→true触发beforeCreate、created、beforeMount、mounted， true→false触发beforeDestory、destoryed</li><li>性能消耗：v-show有更高的初始渲染消耗；v-if有更高的切换消耗</li></ul></li></ul><h2 id="指令" tabindex="-1"><a class="header-anchor" href="#指令" aria-hidden="true">#</a> 指令</h2><h3 id="内置指令" tabindex="-1"><a class="header-anchor" href="#内置指令" aria-hidden="true">#</a> 内置指令</h3><p>Vue一共有16个自带指令，包括了：</p><p><code>v-text</code>、<code>v-html</code>、<code>v-show</code>、<code>v-if</code>、<code>v-else</code>、<code>v-else-if</code>、<code>v-for</code>、<code>v-on</code>、<code>v-bind</code>、<code>v-model</code>、<code>v-slot</code>、<code>v-pre</code>、<code>v-cloak</code>、<code>v-once</code>、<code>v-memo</code>、<code>v-is</code>，其中 <code>v-memo</code> 是3.2新增的，<code>v-is</code> 在3.1.0中废弃</p><ul><li>v-text：v-text的作用是，用于更新元素的 textContent</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>msg<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>v-html：与v-text很像，只是v-html用于更新元素的 innerHTML</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&#39;</span>&lt;h1&gt;Hello LBJ&lt;/h1&gt;&#39;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>v-show：v-show可以根据表达式的真假值，切换元素的display值，用于控制元素的展示和隐藏</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>v-show 不支持 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>v-if：v-if用于根据表达式的真假值，来有条件地渲染元素</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>v-if 支持 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>v-else：v-else无需表达式，表示添加一个“else 块”，相当于v-if满足条件时展示v-if的元素，否则展示v-else的元素</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-else</span><span class="token punctuation">&gt;</span></span>v-else前一个兄弟元素必须有 v-if 或 v-else-if<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>v-else-if：表示 v-if 的“else if 块”，和v-else一样，前一个兄弟元素必须有v-if或 v-else-if</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>a==1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>a==2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-else</span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>v-for：v-for一个用于迭代的指令，可以根据源数据多次渲染元素或模板块</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(item, index) in items<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>index<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>v-on：v-on用于给元素绑定事件，可以缩写为：@</p><p>修饰符</p><ul><li>.stop - 调用 event.stopPropagation()</li><li>.prevent - 调用 event.preventDefault()</li><li>.capture - 添加事件侦听器时使用 capture 模式</li><li>.self - 只当事件是从侦听器绑定的元素本身触发时才触发回调</li><li>.{keyAlias} - 仅当事件是从特定键触发时才触发回调</li><li>.once - 只触发一次回调</li><li>.left - 只当点击鼠标左键时触发</li><li>.right - 只当点击鼠标右键时触发</li><li>.middle - 只当点击鼠标中键时触发</li><li>.passive - { passive: true } 模式添加侦听器</li></ul></li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- 停止冒泡 --&gt;</span>
<span class="token comment">&lt;!-- 用在普通元素上时，只能监听原生 DOM 事件。用在自定义元素组件上时，也可以监听子组件触发的自定义事件 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click.stop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>doThis<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>v-bind：v-bind用于绑定数据和元素属性，可以缩写为: 或.(当使用 .prop 修饰符时)</p><p>修饰符</p><ul><li>.camel - 将 kebab-case attribute 名转换为 camelCase</li><li>.prop - 将一个绑定强制设置为一个 DOM property。3.2+</li><li>.attr - 将一个绑定强制设置为一个 DOM attribute。3.2+</li></ul></li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:someProperty.prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>someObject<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 相当于 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">.someProperty</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>someObject<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>v-model：双向绑定语法糖，v-model限制于：<code>&lt;input&gt; &lt;select&gt; &lt;textarea&gt; components</code></p><p>修饰符</p><ul><li>.lazy - 惰性更新，监听 change 而不是 input 事件</li><li>.number - 输入字符串转为有效的数字</li><li>.trim - 输入首尾空格过滤</li></ul></li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-mode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>value<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>v-slot：v-slot用于提供具名插槽或需要接收 prop 的插槽，可以缩写为：#</p></li><li><p>v-pre：v-pre指令用于跳过这个元素及其子元素的编译过程</p></li><li><p>v-cloak：v-cloak指令主要用于解决插值表达式在页面闪烁问题</p></li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- 这样div只会在编译结束后显示 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-cloak</span><span class="token punctuation">&gt;</span></span>{{ message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">[v-cloak]</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>v-once：v-once指令用于表示只渲染一次，当要重新渲染，元素/组件及其所有的子节点将被视为静态内容并跳过</p></li><li><p>v-memo：用于缓存一个模板的子树 3.2+</p></li></ul><p>该指令接收一个固定长度的数组作为依赖值进行记忆比对。如果数组中的每个值都和上次渲染的时候相同，则整个该子树的更新会被跳过</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- 在重新渲染时，如果 valueA 与 valueB 都维持不变，那么对这个 &lt;div&gt; 以及它的所有子节点的更新都将被跳过 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-memo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[valueA, valueB]<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>v-is：已在 3.1.0 中废弃，改用:is</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>currentView<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="自定义指令" tabindex="-1"><a class="header-anchor" href="#自定义指令" aria-hidden="true">#</a> 自定义指令</h3><h4 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h4><ol><li>全局注册：使用 <code>Vue.directive(id,definition)</code></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">&#39;focus&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token comment">// 当被绑定的元素插入到 DOM 中时……</span>
  <span class="token function-variable function">inserted</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 聚焦元素</span>
    el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>局部注册：使用组件中 <code>directives</code> 选项</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">directives</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">focus</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 指令的定义</span>
    <span class="token function-variable function">inserted</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="钩子函数" tabindex="-1"><a class="header-anchor" href="#钩子函数" aria-hidden="true">#</a> 钩子函数</h4><p>均为可选</p><ul><li><p><code>bind</code>：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。</p></li><li><p><code>inserted</code>：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。</p></li><li><p><code>update</code>：所在组件的 VNode 更新时调用，<strong>但是可能发生在其子 VNode 更新之前</strong>。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新 (详细的钩子函数参数见下)。</p></li><li><p><code>componentUpdated</code>：指令所在组件的 VNode <strong>及其子 VNode</strong> 全部更新后调用。</p></li><li><p><code>unbind</code>：只调用一次，指令与元素解绑时调用。</p></li></ul><h4 id="钩子函数参数" tabindex="-1"><a class="header-anchor" href="#钩子函数参数" aria-hidden="true">#</a> 钩子函数参数</h4><ul><li><code>el</code>：指令所绑定的元素，可以用来直接操作 DOM。</li><li><code>binding</code>：一个对象，包含以下 property： <ul><li><code>name：指令名，不包括 </code>v-\` 前缀。</li><li><code>value</code>：指令的绑定值，例如：<code>v-my-directive=&quot;1 + 1&quot;</code> 中，绑定值为 <code>2</code>。</li><li><code>oldValue</code>：指令绑定的前一个值，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。无论值是否改变都可用。</li><li><code>expression</code>：字符串形式的指令表达式。例如 <code>v-my-directive=&quot;1 + 1&quot;</code> 中，表达式为 <code>&quot;1 + 1&quot;</code>。</li><li><code>arg</code>：传给指令的参数，可选。例如 <code>v-my-directive:foo</code> 中，参数为 <code>&quot;foo&quot;</code>。</li><li><code>modifiers</code>：一个包含修饰符的对象。例如：<code>v-my-directive.foo.bar</code> 中，修饰符对象为 <code>{ foo: true, bar: true }</code>。</li></ul></li><li><code>vnode</code>：Vue 编译生成的虚拟节点。移步 VNode API 来了解更多详情。</li><li><code>oldVnode</code>：上一个虚拟节点，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。</li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><p>除了 <code>el</code> 之外，其它参数都应该是只读的，切勿进行修改。如果需要在钩子之间共享数据，建议通过元素的 <code>dataset</code> 来进行。</p></div><h4 id="案例" tabindex="-1"><a class="header-anchor" href="#案例" aria-hidden="true">#</a> 案例</h4><ul><li><p>v-hasPermission</p></li><li><p>v-focus</p></li><li><p>v-adaptiveHeight</p></li></ul><h2 id="修饰符" tabindex="-1"><a class="header-anchor" href="#修饰符" aria-hidden="true">#</a> 修饰符</h2>`,56),b={href:"https://blog.csdn.net/Yannnnnm/article/details/112485543",target:"_blank",rel:"noopener noreferrer"},h=t(`<p><code>.lazy</code>、<code>.trim</code>、<code>.number</code>、<code>.stop</code>、<code>.prevent</code>、<code>.self</code>、<code>.once</code>、<code>.capture</code>、<code>.passive</code>、<code>.native</code>、<code>.left</code>、<code>.right</code>、<code>.middle</code>、<code>.sync</code>、<code>.camel</code>、<code>.prop</code></p><p>vue中修饰符分为以下五种：</p><ul><li>表单修饰符</li><li>事件修饰符</li><li>鼠标按键修饰符</li><li>键值修饰符</li><li>v-bind修饰符</li></ul><h3 id="表单修饰符" tabindex="-1"><a class="header-anchor" href="#表单修饰符" aria-hidden="true">#</a> 表单修饰符</h3><ul><li>lazy 在我们填完信息，光标离开标签的时候，才会将值赋予给value，也就是在change事件之后再进行信息同步</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span> v<span class="token operator">-</span>model<span class="token punctuation">.</span>lazy<span class="token operator">=</span><span class="token string">&quot;value&quot;</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>trim 自动过滤用户输入的首空格字符，而中间的空格不会过滤</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span> v<span class="token operator">-</span>model<span class="token punctuation">.</span>trim<span class="token operator">=</span><span class="token string">&quot;value&quot;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>number 自动将用户的输入值转为数值类型，但如果这个值无法被parseFloat解析，则会返回原来的值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;number&quot;</span> v<span class="token operator">-</span>model<span class="token punctuation">.</span>number<span class="token operator">=</span><span class="token string">&quot;age&quot;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="事件修饰符" tabindex="-1"><a class="header-anchor" href="#事件修饰符" aria-hidden="true">#</a> 事件修饰符</h3><ul><li>stop 阻止了事件冒泡，相当于调用了event.stopPropagation方法</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div @click<span class="token operator">=</span><span class="token string">&quot;shout(2)&quot;</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>button @click<span class="token punctuation">.</span>stop<span class="token operator">=</span><span class="token string">&quot;shout(1)&quot;</span><span class="token operator">&gt;</span>ok<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token comment">//只输出1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>prevent 阻止了事件的默认行为，相当于调用了event.preventDefault方法</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>form v<span class="token operator">-</span>on<span class="token operator">:</span>submit<span class="token punctuation">.</span>prevent<span class="token operator">=</span><span class="token string">&quot;onSubmit&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>self 只当在 event.target 是当前元素自身时触发处理函数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div v<span class="token operator">-</span>on<span class="token operator">:</span>click<span class="token punctuation">.</span>self<span class="token operator">=</span><span class="token string">&quot;doThat&quot;</span><span class="token operator">&gt;</span><span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 v-on:click.prevent.self 会阻止所有的点击，而 v-on:click.self.prevent 只会阻止对元素自身的点击</p></div><ul><li>once 绑定了事件以后只能触发一次，第二次就不会触发</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>button @click<span class="token punctuation">.</span>once<span class="token operator">=</span><span class="token string">&quot;shout(1)&quot;</span><span class="token operator">&gt;</span>ok<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>capture 使事件触发从包含这个元素的顶层开始往下触发</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div @click<span class="token punctuation">.</span>capture<span class="token operator">=</span><span class="token string">&quot;shout(1)&quot;</span><span class="token operator">&gt;</span>
  obj1
  <span class="token operator">&lt;</span>div @click<span class="token punctuation">.</span>capture<span class="token operator">=</span><span class="token string">&quot;shout(2)&quot;</span><span class="token operator">&gt;</span>
    obj2
    <span class="token operator">&lt;</span>div @click<span class="token operator">=</span><span class="token string">&quot;shout(3)&quot;</span><span class="token operator">&gt;</span>
      obj3
      <span class="token operator">&lt;</span>div @click<span class="token operator">=</span><span class="token string">&quot;shout(4)&quot;</span><span class="token operator">&gt;</span>
        obj4
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token comment">// 输出结构: 1 2 4 3 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>passive 在移动端，当我们在监听元素滚动事件的时候，会一直触发onscroll事件会让我们的网页变卡，因此我们使用这个修饰符的时候，相当于给onscroll事件整了一个.lazy修饰符</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token function">滚动事件的默认行为</span> <span class="token punctuation">(</span>即滚动行为<span class="token punctuation">)</span> 将会立即触发 <span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 而不会等待 <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">onScroll</span><span class="token template-punctuation string">\`</span></span> 完成  <span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 这其中包含 <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">event.preventDefault()</span><span class="token template-punctuation string">\`</span></span> 的情况 <span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>div v<span class="token operator">-</span>on<span class="token operator">:</span>scroll<span class="token punctuation">.</span>passive<span class="token operator">=</span><span class="token string">&quot;onScroll&quot;</span><span class="token operator">&gt;</span><span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>不要把 .passive 和 .prevent 一起使用,因为 .prevent 将会被忽略，同时浏览器可能会向你展示一个警告。 passive 会告诉浏览器你不想阻止事件的默认行为</p></div><ul><li>native 让组件变成像html内置标签那样监听根元素的原生事件，否则组件上使用 v-on 只会监听自定义事件</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 如果只是 v-on:click=&quot;doSomething&quot; 则不会触发 doSomething 方法</span>
<span class="token operator">&lt;</span>my<span class="token operator">-</span>component v<span class="token operator">-</span>on<span class="token operator">:</span>click<span class="token punctuation">.</span>native<span class="token operator">=</span><span class="token string">&quot;doSomething&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>my<span class="token operator">-</span>component<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="鼠标按钮修饰符" tabindex="-1"><a class="header-anchor" href="#鼠标按钮修饰符" aria-hidden="true">#</a> 鼠标按钮修饰符</h3><ul><li><p>left 左键点击</p></li><li><p>right 右键点击</p></li><li><p>middle 中键点击</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>button @click<span class="token punctuation">.</span>left<span class="token operator">=</span><span class="token string">&quot;shout(1)&quot;</span><span class="token operator">&gt;</span>ok<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>button @click<span class="token punctuation">.</span>right<span class="token operator">=</span><span class="token string">&quot;shout(1)&quot;</span><span class="token operator">&gt;</span>ok<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>button @click<span class="token punctuation">.</span>middle<span class="token operator">=</span><span class="token string">&quot;shout(1)&quot;</span><span class="token operator">&gt;</span>ok<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="键盘修饰符" tabindex="-1"><a class="header-anchor" href="#键盘修饰符" aria-hidden="true">#</a> 键盘修饰符</h3><p>键盘修饰符是用来修饰键盘事件（onkeyup，onkeydown）的，有如下：</p><p>keyCode存在很多，但vue为我们提供了别名，分为以下两种：</p><ul><li><p>普通键（enter、tab、delete、space、esc、up…）</p></li><li><p>系统修饰键（ctrl、alt、meta、shift…）</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 只有按键为keyCode的时候才触发</span>
<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span> @keyup<span class="token punctuation">.</span>keyCode<span class="token operator">=</span><span class="token string">&quot;shout()&quot;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="v-bind修饰符" tabindex="-1"><a class="header-anchor" href="#v-bind修饰符" aria-hidden="true">#</a> v-bind修饰符</h3><ul><li>sync（(2.3.0+) 语法糖，相当于给props开启了双向数据绑定）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 父组件</span>
<span class="token operator">&lt;</span>comp <span class="token operator">:</span>myMessage<span class="token punctuation">.</span>sync<span class="token operator">=</span><span class="token string">&quot;bar&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>comp<span class="token operator">&gt;</span> 

<span class="token comment">// 子组件</span>
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;update:myMessage&#39;</span><span class="token punctuation">,</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 子组件直接修改父组件传递过来的值会被vue2警告</span>
<span class="token comment">// myMessage 需要一致</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>prop（作为一个 DOM property 绑定而不是作为 attribute 绑定）。</p></li><li><p>camel（(2.1.0+) 将 kebab-case attribute 名转换为 camelCase）</p></li></ul><h2 id="nexttick" tabindex="-1"><a class="header-anchor" href="#nexttick" aria-hidden="true">#</a> nextTick</h2><ul><li>概念</li></ul><p>在下次DOM更新循环结束之后执行延迟回调</p><ul><li>为什么存在</li></ul><p>因为Vue 更新DOM时 是采用 <code>异步更新策略</code>，当监听到数据发生变化的时候不会立即去更新DOM。<br> 比如：点击按钮改变视图元素的值，然后获取视图元素的值打印，获取还是改变前的，因为视图还没有渲染完。</p><div class="hint-container warning"><p class="hint-container-title">Vue 异步更新策略</p><p>Vue 在更新 DOM 时是异步执行的。 只要侦听到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更。 如果同一个 watcher 被多次触发，只会被推入到队列中一次。 这种在缓冲时去除重复数据对于 <code>避免不必要的计算和 DOM 操作</code> 是非常重要的。 然后，在下一个的事件循环“tick”中，Vue 刷新队列并执行实际 (已去重的) 工作。 Vue 在内部对异步队列尝试使用原生的 Promise.then、MutationObserver 和 setImmediate，如果执行环境不支持，则会采用 setTimeout(fn, 0) 代替。</p></div><ul><li>作用</li></ul><p>nextTick 接收一个回调函数作为参数，并将这个回调函数延迟到DOM更新后才执行</p><ul><li>实现原理</li></ul><p>将传入的回调函数包装成异步任务，异步任务又分微任务和宏任务，为了尽快执行所以优先选择微任务； nextTick 内对浏览器的兼容性进行优雅降级处理 <code>Promise.then(微)</code> &gt; <code>MutationObserver(微)</code> &gt; <code>setImmediate(宏)</code> &gt; <code>setTimeout(fn,0)(宏)</code></p><h2 id="set" tabindex="-1"><a class="header-anchor" href="#set" aria-hidden="true">#</a> set</h2>`,50),f={href:"https://blog.csdn.net/liu19721018/article/details/125554525",target:"_blank",rel:"noopener noreferrer"},q=t(`<ul><li>用途</li></ul><p>在Vue2中当我们通过数组的下标去修改数组值，或者向对象添加添加属性时，对应的视图都无法进行更新，这是因为我们所添加的数据不是响应式的，无法响应视图的变化。那么此时我们可以通过 <code>$set</code> 来实现。对于数组可以通过 <code>this.$set(this.arr,0,&#39;xx&#39;)</code> 来去修改数组下标对应的值，对于对象可以通过 <code>this.$set(this.obj,&#39;a&#39;,&#39;xxx&#39;)</code> 向对象新增属性a。</p><ul><li>例子</li></ul><p><code>this.persons[0].name = &#39;马老师&#39;</code> 通过直接修改数组里面对象的值，页面模板改变。</p><p><code>this.persons[0] = {id:&#39;001&#39;,name:&#39;马老师&#39;,age:50,sex:&#39;男&#39;}</code> 通过索引改数组的值，页面模板不变， 因为Vue用数据代理 <code>Object.defineProperty get()、set()</code> 进行模板更新， 而原生的数组方法无法实现这一点。【<strong>如果数组每一个都加get、set，那么会严重影响代码效率</strong>】</p><p>因此vue重写了<code>push 、pop 、shift 、unshift 、splice 、sort 、reverse</code></p><ul><li>原理</li></ul><p>当$set所设置的目标对象为数组时，则调用目标对象的splice方法将修改的数据变为响应式。</p><p>当$set所设置的目标对象为对象时，先判断这个属性是否在对象上，如果不在就给目标对象的属性添加响应式</p><h2 id="vuex" tabindex="-1"><a class="header-anchor" href="#vuex" aria-hidden="true">#</a> vuex</h2><ul><li>概念</li></ul><ol><li><code>state</code>：相当于组件的data this.$store.state.num</li><li><code>getters</code>：相当于组件的computed this.$store.getters.getNum</li><li><code>mutations</code>(更改vuex中的状态的唯一办法就是提交mutation)： 相当于组件的methods，但不能使用异步 this.$store.commit(&quot;increase&quot;, 3)</li><li><code>actions</code>：处理异步 this.$store.dispatch(&#39;decreaseAsync&#39;)</li><li><code>module</code>：模块化，命名空间 <code>namespace</code></li></ol><ul><li>辅助函数</li></ul><p>mapState、mapGetters、mapActions、mapMutations</p><ul><li>为什么mutations不能处理异步</li></ul><p>Vuex中所有的状态更新的唯一途径都是mutation，异步操作通过 Action 来提交 mutation实现，这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具（devtools）帮助我们更好地了解我们的应用。</p><h2 id="mixins" tabindex="-1"><a class="header-anchor" href="#mixins" aria-hidden="true">#</a> Mixins</h2><blockquote><p>生命周期先执行，data数据和其他选项卡重名会被覆盖</p></blockquote><ul><li><p>mixin 中定义的方法和参数<code>在各组件中不共享</code>， 即当前组件对mixins的属性的修改，其他也引用了这个mixins的组件不会受影响;</p></li><li><p>mixin 中定义的<code>生命周期函数会比引用组件的生命周期先执行</code>，会和组件中定义的methods、created等选项合并调用;</p></li><li><p>mixin 对象里的(components、methods、computed、data)这些选项，混入组件时选项会被合并，重名冲突时<code>优先采用组件中定义的数据</code>;</p></li><li><p>果同时引入多个mixin对象，<code>执行顺序和引入顺序一致</code>;</p></li></ul><h2 id="插槽" tabindex="-1"><a class="header-anchor" href="#插槽" aria-hidden="true">#</a> 插槽</h2><h3 id="作用" tabindex="-1"><a class="header-anchor" href="#作用" aria-hidden="true">#</a> 作用</h3><p><code>插槽</code>：父组件提供内容，在子组件中展示。<br><code>作用域插槽</code>：子组件提供内容（数据），在父组件中展示。</p><h3 id="类型" tabindex="-1"><a class="header-anchor" href="#类型" aria-hidden="true">#</a> 类型</h3><ul><li>匿名插槽</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 父组件</span>
<span class="token operator">&lt;</span>niming<span class="token operator">&gt;</span><span class="token number">11</span><span class="token operator">&lt;</span><span class="token operator">/</span>niming<span class="token operator">&gt;</span>

<span class="token comment">// 子组件</span>
<span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>我是匿名插槽<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;slot&quot;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>slot <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>具名插槽</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 父组件</span>
<span class="token operator">&lt;</span>juming<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>template slot<span class="token operator">=</span><span class="token string">&quot;slot1&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>这是蓝色<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>template slot<span class="token operator">=</span><span class="token string">&quot;slot2&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>这是绿色<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>juming<span class="token operator">&gt;</span>

<span class="token comment">// 子组件</span>
<span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>我是具名插槽<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">&quot;background-color:blue&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">&quot;slot1&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">&quot;background-color:green&quot;</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">&quot;slot2&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>作用域插槽</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 父组件1</span>
<span class="token operator">&lt;</span>zyy1 <span class="token operator">:</span>list<span class="token operator">=</span><span class="token string">&quot;list&quot;</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>template slot<span class="token operator">-</span>scope<span class="token operator">=</span><span class="token string">&quot;scope&quot;</span><span class="token operator">&gt;</span>
    <span class="token punctuation">{</span><span class="token punctuation">{</span> scope<span class="token punctuation">.</span>$index <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">-</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> scope<span class="token punctuation">.</span>itemName<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token punctuation">}</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>zyy1<span class="token operator">&gt;</span>

<span class="token comment">// 子组件1</span>
<span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>我是作用域插槽<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">&quot;(item,index) in list&quot;</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">&quot;index&quot;</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>slot <span class="token operator">:</span>itemName<span class="token operator">=</span><span class="token string">&quot;item&quot;</span> <span class="token operator">:</span>index<span class="token operator">=</span><span class="token string">&quot;index&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>

<span class="token comment">// 父组件2</span>
<span class="token operator">&lt;</span>zyy2 <span class="token operator">:</span>user<span class="token operator">-</span>info<span class="token operator">=</span><span class="token string">&quot;userInfo&quot;</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>template slot<span class="token operator">-</span>scope<span class="token operator">=</span><span class="token string">&quot;scope&quot;</span><span class="token operator">&gt;</span>
    <span class="token punctuation">{</span><span class="token punctuation">{</span> scope<span class="token punctuation">.</span>info <span class="token punctuation">}</span><span class="token punctuation">}</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>zyy2<span class="token operator">&gt;</span>

<span class="token comment">// 子组件2</span>
<span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>我是作用域插槽<span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>slot <span class="token operator">:</span>info<span class="token operator">=</span><span class="token string">&quot;userInfo&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="设计模式" tabindex="-1"><a class="header-anchor" href="#设计模式" aria-hidden="true">#</a> 设计模式</h2><ul><li>单例模式：new多次，只有一个实例</li><li>工厂模式：传入参数就可以创建实例（虚拟节点的创建）</li><li>发布订阅模式：eventBus、双向数据绑定</li><li>观察者模式：watch</li><li>代理模式：_data属性、proxy、防抖、节流</li><li>中介者模式：vuex</li><li>策略模式</li><li>外观模式</li></ul><div class="hint-container warning"><p class="hint-container-title">观察者 vs 发布订阅</p><ol><li>观察者模式，被观察者和观察者之间可以直接通讯；发布订阅模式，消息发送者不会将消息直接发送给订阅者，而是通过一个事件通道传递（直签公司和外派公司）</li><li>观察者模式需要定义两个类，一个被观察者类（里面需要有添加观察者方法、通知方法）、一个观察者类（定义需要执行的方法）；发布订阅模式只需要定义一个类（里面需要定义发布方法、订阅方法）</li><li>观察者模式没有完全解耦；发布订阅模式实现了发布者和订阅者的解耦</li></ol></div>`,32);function x(y,j){const n=o("ExternalLinkIcon");return l(),c("div",null,[s("p",null,[s("a",r,[a("vue上"),e(n)])]),s("p",null,[s("a",u,[a("vue下"),e(n)])]),d,s("p",null,[s("a",k,[a("掘金文章"),e(n)])]),v,m,g,s("p",null,[s("a",b,[a("参考文章"),e(n)])]),h,s("p",null,[s("a",f,[a("文章"),e(n)])]),q])}const _=p(i,[["render",x],["__file","vue2.html.vue"]]);export{_ as default};
