import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as p,c as t,b as n,d as o,e as c,f as l}from"./app-889e667f.js";const i="/test/images/javascript/commonjs值拷贝.png",r="/test/images/javascript/esmodule值引用.png",u={},d={href:"https://blog.csdn.net/weixin_43917792/article/details/118668349",target:"_blank",rel:"noopener noreferrer"},k=l(`<h2 id="commonjs" tabindex="-1"><a class="header-anchor" href="#commonjs" aria-hidden="true">#</a> CommonJs</h2><blockquote><p>CommonJS 使用 module.exports、exports 导出；使用 require 导入</p></blockquote><p>Node.js 是 commonJS 规范的主要实践者。Node 应用由模块组成，采用 CommonJS 模块规范。</p><p>每个文件就是一个模块，有自己的作用域。在一个文件里面定义的变量、函数、类，都是私有的，对其他文件不可见。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 在node环境直接打印 module 对象</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span>

Module <span class="token punctuation">{</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">exports</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 表示模块对外输出的值</span>
  <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">loaded</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">paths</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="导出" tabindex="-1"><a class="header-anchor" href="#导出" aria-hidden="true">#</a> 导出</h3><p>c1.js文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">10</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">20</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了方便，Node为每个模块提供一个 exports 变量，指向 module.exports。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">10</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> exports<span class="token punctuation">)</span>

<span class="token comment">// module</span>
Module <span class="token punctuation">{</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">exports</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">loaded</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">paths</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token comment">// module.exports</span>
<span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span>

<span class="token comment">// exports</span>
<span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此可以写成</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>exports<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>需要注意的是，不能将 exports 变量指向一个值，因为那样就等同于切断了exports 和 module.exports 的联系； 同样如果使用 module.exports = {} 的形式赋值，也会丢失 exports 导出的内容。看下面这种情况</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">10</span> <span class="token comment">// { a: 10 }</span>

exports<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">20</span> <span class="token comment">// { a: 10, b: 20 }</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment">// { c: 30 }</span>
  <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">30</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="导入" tabindex="-1"><a class="header-anchor" href="#导入" aria-hidden="true">#</a> 导入</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./c1&#39;</span><span class="token punctuation">)</span> <span class="token comment">// { c: 30 }</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./c1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>c <span class="token comment">// 30</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="esmodule" tabindex="-1"><a class="header-anchor" href="#esmodule" aria-hidden="true">#</a> ESModule</h2><blockquote><p>ES Module 采用 export、export default 导出，使用 import 关键字导入</p></blockquote><h3 id="导出-1" tabindex="-1"><a class="header-anchor" href="#导出-1" aria-hidden="true">#</a> 导出</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 第一种 export</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;这是func&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">b</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token number">20</span>
<span class="token punctuation">}</span>
<span class="token comment">// 第二种 export default</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  b
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="导入-1" tabindex="-1"><a class="header-anchor" href="#导入-1" aria-hidden="true">#</a> 导入</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 第一种</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> func <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./e1.js&#39;</span>
<span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 这是func</span>

<span class="token comment">// 第二种</span>
<span class="token keyword">import</span> exdata <span class="token keyword">from</span> <span class="token string">&#39;./e1.js&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>exdata<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token comment">// 10</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>exdata<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="区别" tabindex="-1"><a class="header-anchor" href="#区别" aria-hidden="true">#</a> 区别</h2><ul><li>CommonJS 模块是运行时加载，ES6 模块是编译时输出接口</li></ul><p><code>运行时加载</code>：commonjs模块就是对象；即在输入时先加载整个模块，生成一个对象，然后再从这个对象上读取属性和方法。也这样理解：Commonjs加载的是一个对象（module.exports属性），该对象只有在脚本运行时才能生成。</p><p><code>编译时加载（静态加载）</code>：ES6模块不是对象，而是通过export命令显式指定输入的代码，Import时可以指定加载某个导出的值，而不是加载整个模块。这种加载方式的好处在于加载效率高，能进一步拓展JavaScript的语法，比如引入宏和类型校验这些只能靠静态分析实现的功能。包括tree shaking的实现，也是依赖es6 module的静态加载。</p><ul><li>commonjs是导出值的拷贝，es6 module是导出值的引用</li></ul><p><code>commonjs导出值拷贝</code>：commonjs的一个模块就是一个脚本文件。require命令第一次加载该脚本，就会执行整个脚本，然后在内存生成一个对象（拷贝）。</p><figure><img src="`+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>以后需要用到这个模块的时候，就会在exports属性上面取值，即使再次执行require命令，也不会再次执行该模块，而是到缓存之中取值，也就是说commonjs模块无论加载多少次，都只会在第一次加载时运行一次，以后再加载就返回第一次运行的结果。</p><p><code>es导出值引用</code>：es模块遇到模块加载命令import，就会生成一个只读引用，等到脚本执行时，再根据这个只读引用，到被加载的那个模块里面去取值，原始值变了，import加载的值也会跟着变。因此，es6模块是动态引用，不会有缓存值，模块里的变量绑定其所在的模块。</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',32);function m(v,b){const s=e("ExternalLinkIcon");return p(),t("div",null,[n("p",null,[n("a",d,[o("参考文章"),c(s)])]),k])}const x=a(u,[["render",m],["__file","模块化.html.vue"]]);export{x as default};
